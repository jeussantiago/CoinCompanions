{"ast":null,"code":"var _jsxFileName = \"/Users/jeussantiago/Documents/coding/django/CoinCompanions/frontend/src/screens/IndividualGroupScreen.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\n\n/**\n * if the user is not logged in. navigate to home page\n * if the user is not part of the group. navigate to the groups page\n *\n * modify group name\n * create group button\n *\n *\n * expense chart\n * list expenses\n *      type='expense' or 'settle'\n *      date_added\n *      description\n *      how_much\n *      who paid\n *      (edit button)\n *\n * add expense\n *      (will use the same form as edit expense. will have conditional to differentiate between adding expense and updating)\n *\n * (when you click an expense, it expands to show the specifics)\n *      how much each person owes the payer\n *\n * Expense Edit\n *      able to see how much each person paid\n *      decide to split it by:\n *          - raw numbers\n *          - percentage\n *          - evenly split\n *\n * RIGHT SIDE:\n * list all the users and their debt to each person or how much they are owed from certain people\n *\n * search bar to invite other users to group\n *\n *\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction IndividualGroupScreen() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n\n  // NAVIGATE THE USER AWAY IF THEY ARE NOT PART OF THIS GROUP\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"route-container screen-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"IndividualGroupScreen : Group \", id, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(IndividualGroupScreen, \"1JEIvPRIKJKnaO45RHf/GR9vcR4=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = IndividualGroupScreen;\nexport default IndividualGroupScreen;\nvar _c;\n$RefreshReg$(_c, \"IndividualGroupScreen\");","map":{"version":3,"names":["React","Link","useNavigate","useParams","jsxDEV","_jsxDEV","IndividualGroupScreen","_s","id","navigate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jeussantiago/Documents/coding/django/CoinCompanions/frontend/src/screens/IndividualGroupScreen.js"],"sourcesContent":["import React from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\n\n/**\n * if the user is not logged in. navigate to home page\n * if the user is not part of the group. navigate to the groups page\n *\n * modify group name\n * create group button\n *\n *\n * expense chart\n * list expenses\n *      type='expense' or 'settle'\n *      date_added\n *      description\n *      how_much\n *      who paid\n *      (edit button)\n *\n * add expense\n *      (will use the same form as edit expense. will have conditional to differentiate between adding expense and updating)\n *\n * (when you click an expense, it expands to show the specifics)\n *      how much each person owes the payer\n *\n * Expense Edit\n *      able to see how much each person paid\n *      decide to split it by:\n *          - raw numbers\n *          - percentage\n *          - evenly split\n *\n * RIGHT SIDE:\n * list all the users and their debt to each person or how much they are owed from certain people\n *\n * search bar to invite other users to group\n *\n *\n */\nfunction IndividualGroupScreen() {\n    const { id } = useParams();\n    const navigate = useNavigate();\n\n    // NAVIGATE THE USER AWAY IF THEY ARE NOT PART OF THIS GROUP\n\n    return (\n        <div className=\"route-container screen-container\">\n            <div>IndividualGroupScreen : Group {id} </div>\n        </div>\n    );\n}\n\nexport default IndividualGroupScreen;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA,SAAAC,MAAA,IAAAC,OAAA;AAqCA,SAASC,qBAAqBA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM;IAAEC;EAAG,CAAC,GAAGL,SAAS,CAAC,CAAC;EAC1B,MAAMM,QAAQ,GAAGP,WAAW,CAAC,CAAC;;EAE9B;;EAEA,oBACIG,OAAA;IAAKK,SAAS,EAAC,kCAAkC;IAAAC,QAAA,eAC7CN,OAAA;MAAAM,QAAA,GAAK,gCAA8B,EAACH,EAAE,EAAC,GAAC;IAAA;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEd;AAACR,EAAA,CAXQD,qBAAqB;EAAA,QACXH,SAAS,EACPD,WAAW;AAAA;AAAAc,EAAA,GAFvBV,qBAAqB;AAa9B,eAAeA,qBAAqB;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}