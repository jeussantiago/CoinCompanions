{"ast":null,"code":"var _jsxFileName = \"/Users/jeussantiago/Documents/coding/django/CoinCompanions/frontend/src/screens/IndividualGroupScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../styles/screens/GroupsScreens.css\";\nimport { GROUP_DETAILS_RESET } from \"../constants/groupConstants\";\nimport Message from \"../components/Message\";\nimport AlertMessage from \"../components/AlertMessage\";\nimport { getGroupDetails } from \"../actions/groupActions\";\n\n/**\n * if the user is not logged in. navigate to home page\n * if the user is not part of the group. navigate to the groups page\n *\n * modify group name\n * create group button\n *\n *\n * expense chart\n * list expenses\n *      type='expense' or 'settle'\n *      date_added\n *      description\n *      how_much\n *      who paid\n *      (edit button)\n *\n * add expense\n *      (will use the same form as edit expense. will have conditional to differentiate between adding expense and updating)\n *\n * (when you click an expense, it expands to show the specifics)\n *      how much each person owes the payer\n *\n * Expense Edit\n *      able to see how much each person paid\n *      decide to split it by:\n *          - raw numbers\n *          - percentage\n *          - evenly split\n *\n * RIGHT SIDE:\n * list all the users and their debt to each person or how much they are owed from certain people\n *\n * search bar to invite other users to group\n *\n *\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction IndividualGroupScreen() {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n\n  // get the current user details\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n\n  // get the members of the group\n  const groupDetails = useSelector(state => state.groupDetails);\n  const {\n    error: groupDetailsError,\n    loading: groupDetailsLoading,\n    groupDetail\n  } = groupDetails;\n  console.log(groupDetail);\n\n  // NAVIGATE THE USER AWAY IF THEY ARE NOT PART OF THIS GROUP\n  useEffect(() => {\n    // finished getting data and group id doesn't exist\n    //user not a member\n    if (!groupDetailsLoading && (groupDetailsError || groupDetail && !groupDetail.members.some(member => member.id === userInfo.id))) {\n      navigate(\"/groups\");\n      dispatch({\n        type: GROUP_DETAILS_RESET\n      });\n    }\n  }, [navigate, userInfo, groupDetailsError, groupDetailsLoading, groupDetail, dispatch]);\n  useEffect(() => {\n    dispatch(getGroupDetails(id));\n  }, [dispatch, id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"route-container screen-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: groupDetail.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"IndividualGroupScreen : Group \", id, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n_s(IndividualGroupScreen, \"HLrQTAWjxtzp4YM6g/l/YHMtIKk=\", false, function () {\n  return [useDispatch, useParams, useNavigate, useSelector, useSelector];\n});\n_c = IndividualGroupScreen;\nexport default IndividualGroupScreen;\nvar _c;\n$RefreshReg$(_c, \"IndividualGroupScreen\");","map":{"version":3,"names":["React","useEffect","Link","useNavigate","useParams","useDispatch","useSelector","GROUP_DETAILS_RESET","Message","AlertMessage","getGroupDetails","jsxDEV","_jsxDEV","IndividualGroupScreen","_s","dispatch","id","navigate","userLogin","state","userInfo","groupDetails","error","groupDetailsError","loading","groupDetailsLoading","groupDetail","console","log","members","some","member","type","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jeussantiago/Documents/coding/django/CoinCompanions/frontend/src/screens/IndividualGroupScreen.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"../styles/screens/GroupsScreens.css\";\nimport { GROUP_DETAILS_RESET } from \"../constants/groupConstants\";\nimport Message from \"../components/Message\";\nimport AlertMessage from \"../components/AlertMessage\";\nimport { getGroupDetails } from \"../actions/groupActions\";\n\n/**\n * if the user is not logged in. navigate to home page\n * if the user is not part of the group. navigate to the groups page\n *\n * modify group name\n * create group button\n *\n *\n * expense chart\n * list expenses\n *      type='expense' or 'settle'\n *      date_added\n *      description\n *      how_much\n *      who paid\n *      (edit button)\n *\n * add expense\n *      (will use the same form as edit expense. will have conditional to differentiate between adding expense and updating)\n *\n * (when you click an expense, it expands to show the specifics)\n *      how much each person owes the payer\n *\n * Expense Edit\n *      able to see how much each person paid\n *      decide to split it by:\n *          - raw numbers\n *          - percentage\n *          - evenly split\n *\n * RIGHT SIDE:\n * list all the users and their debt to each person or how much they are owed from certain people\n *\n * search bar to invite other users to group\n *\n *\n */\nfunction IndividualGroupScreen() {\n    const dispatch = useDispatch();\n\n    const { id } = useParams();\n    const navigate = useNavigate();\n\n    // get the current user details\n    const userLogin = useSelector((state) => state.userLogin);\n    const { userInfo } = userLogin;\n\n    // get the members of the group\n    const groupDetails = useSelector((state) => state.groupDetails);\n    const {\n        error: groupDetailsError,\n        loading: groupDetailsLoading,\n        groupDetail,\n    } = groupDetails;\n\n    console.log(groupDetail);\n\n    // NAVIGATE THE USER AWAY IF THEY ARE NOT PART OF THIS GROUP\n    useEffect(() => {\n        // finished getting data and group id doesn't exist\n        //user not a member\n        if (\n            !groupDetailsLoading &&\n            (groupDetailsError ||\n                (groupDetail &&\n                    !groupDetail.members.some(\n                        (member) => member.id === userInfo.id\n                    )))\n        ) {\n            navigate(\"/groups\");\n            dispatch({ type: GROUP_DETAILS_RESET });\n        }\n    }, [\n        navigate,\n        userInfo,\n        groupDetailsError,\n        groupDetailsLoading,\n        groupDetail,\n        dispatch,\n    ]);\n\n    useEffect(() => {\n        dispatch(getGroupDetails(id));\n    }, [dispatch, id]);\n\n    return (\n        <div className=\"route-container screen-container\">\n            <h1>{groupDetail.name}</h1>\n            <div>IndividualGroupScreen : Group {id} </div>\n        </div>\n    );\n}\n\nexport default IndividualGroupScreen;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,IAAI,EAAEC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AAC/D,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAO,qCAAqC;AAC5C,SAASC,mBAAmB,QAAQ,6BAA6B;AACjE,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,YAAY,MAAM,4BAA4B;AACrD,SAASC,eAAe,QAAQ,yBAAyB;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA,SAAAC,MAAA,IAAAC,OAAA;AAqCA,SAASC,qBAAqBA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9B,MAAM;IAAEW;EAAG,CAAC,GAAGZ,SAAS,CAAC,CAAC;EAC1B,MAAMa,QAAQ,GAAGd,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMe,SAAS,GAAGZ,WAAW,CAAEa,KAAK,IAAKA,KAAK,CAACD,SAAS,CAAC;EACzD,MAAM;IAAEE;EAAS,CAAC,GAAGF,SAAS;;EAE9B;EACA,MAAMG,YAAY,GAAGf,WAAW,CAAEa,KAAK,IAAKA,KAAK,CAACE,YAAY,CAAC;EAC/D,MAAM;IACFC,KAAK,EAAEC,iBAAiB;IACxBC,OAAO,EAAEC,mBAAmB;IAC5BC;EACJ,CAAC,GAAGL,YAAY;EAEhBM,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;;EAExB;EACAzB,SAAS,CAAC,MAAM;IACZ;IACA;IACA,IACI,CAACwB,mBAAmB,KACnBF,iBAAiB,IACbG,WAAW,IACR,CAACA,WAAW,CAACG,OAAO,CAACC,IAAI,CACpBC,MAAM,IAAKA,MAAM,CAACf,EAAE,KAAKI,QAAQ,CAACJ,EACvC,CAAE,CAAC,EACb;MACEC,QAAQ,CAAC,SAAS,CAAC;MACnBF,QAAQ,CAAC;QAAEiB,IAAI,EAAEzB;MAAoB,CAAC,CAAC;IAC3C;EACJ,CAAC,EAAE,CACCU,QAAQ,EACRG,QAAQ,EACRG,iBAAiB,EACjBE,mBAAmB,EACnBC,WAAW,EACXX,QAAQ,CACX,CAAC;EAEFd,SAAS,CAAC,MAAM;IACZc,QAAQ,CAACL,eAAe,CAACM,EAAE,CAAC,CAAC;EACjC,CAAC,EAAE,CAACD,QAAQ,EAAEC,EAAE,CAAC,CAAC;EAElB,oBACIJ,OAAA;IAAKqB,SAAS,EAAC,kCAAkC;IAAAC,QAAA,gBAC7CtB,OAAA;MAAAsB,QAAA,EAAKR,WAAW,CAACS;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC3B3B,OAAA;MAAAsB,QAAA,GAAK,gCAA8B,EAAClB,EAAE,EAAC,GAAC;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEd;AAACzB,EAAA,CAtDQD,qBAAqB;EAAA,QACTR,WAAW,EAEbD,SAAS,EACPD,WAAW,EAGVG,WAAW,EAIRA,WAAW;AAAA;AAAAkC,EAAA,GAX3B3B,qBAAqB;AAwD9B,eAAeA,qBAAqB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}