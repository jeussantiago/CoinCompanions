{"ast":null,"code":"var _jsxFileName = \"/Users/jeussantiago/Documents/coding/django/CoinCompanions/frontend/src/components/IndividualGroupScreenComponents/ExpenseDetailPopup.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { Modal, Button, Row, Col, FormControl, Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"../../styles/screens/GroupsScreens.css\";\nimport AlertMessage from \"../AlertMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExpenseDetailPopup({\n  show,\n  onClose,\n  expense\n}) {\n  _s();\n  // const dispatch = useDispatch();\n  // const [showAlert, setShowAlert] = useState(false);\n  // const [alertMessage, setAlertMessage] = useState(\"\");\n  // const [alertVariant, setAlertVariant] = useState(\"\");\n  // const [success, setSuccess] = useState(false);\n  // const [form, setForm] = useState({\n  //     title: \"\",\n  // });\n\n  // const groupCreate = useSelector((state) => state.groupCreate);\n  // const { success: groupCreateSuccess } = groupCreate;\n\n  // const handleFormChange = (e) => {\n  //     setForm({\n  //         ...form,\n  //         [e.target.name]: e.target.value,\n  //     });\n  // };\n\n  // const handleSubmit = () => {\n  //     // dispatch(createGroup(form.title));\n  //     setSuccess(true);\n  //     closePopup();\n  // };\n\n  // const closePopup = () => {\n  //     // Clear the title input\n  //     setForm({\n  //         ...form,\n  //         title: \"\",\n  //     });\n  //     // Close the popup\n  //     onClose();\n  //     // dispatch({ type: GROUP_CREATE_RESET });\n  // };\n\n  // const handleShowAlert = useCallback((message, variant) => {\n  //     setAlertMessage(message);\n  //     setAlertVariant(variant);\n  //     setShowAlert(true);\n  //     setTimeout(() => {\n  //         setShowAlert(false);\n  //     }, 3000);\n  // }, []);\n\n  // useEffect(() => {\n  //     if (groupCreateSuccess || success) {\n  //         handleShowAlert(\"Created new group\", \"success\");\n  //     } else if (groupCreateSuccess === false || success === false) {\n  //         handleShowAlert(\n  //             \"Error occurred while trying to create a new group\",\n  //             \"danger\"\n  //         );\n  //     }\n  // }, [groupCreateSuccess, success, handleShowAlert]);\n\n  // useEffect(() => {\n  //     if (expense) {\n  //         setSuccess(false);\n  //     }\n  // }, [expense]);\n\n  // return (\n  //     <div>\n  //         <Modal show={show} onHide={onClose}>\n  //             <Modal.Header>\n  //                 <Modal.Title>Create New Group</Modal.Title>\n  //             </Modal.Header>\n  //             <Modal.Body>\n  //                 <Form>\n  //                     <Form.Group>\n  //                         <Form.Control\n  //                             type=\"text\"\n  //                             placeholder=\"Enter group title\"\n  //                             name=\"title\"\n  //                             onChange={handleFormChange}\n  //                         />\n  //                     </Form.Group>\n  //                 </Form>\n  //             </Modal.Body>\n  //             <Modal.Footer className=\"d-flex flex-row justify-content-between\">\n  //                 <Button variant=\"primary\" onClick={handleSubmit}>\n  //                     Submit\n  //                 </Button>\n  //                 <Button variant=\"secondary\" onClick={() => closePopup()}>\n  //                     Close\n  //                 </Button>\n  //             </Modal.Footer>\n  //         </Modal>\n  //         {showAlert && (\n  //             <AlertMessage message={alertMessage} variant={alertVariant} />\n  //         )}\n  //     </div>\n  // );\n\n  const dispatch = useDispatch();\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const [alertVariant, setAlertVariant] = useState(\"\");\n  const [updatedDescription, setUpdatedDescription] = useState(\"\");\n  const [updatedAmountPaid, setUpdatedAmountPaid] = useState(0);\n  const [userAmounts, setUserAmounts] = useState({});\n  const [success, setSuccess] = useState(false);\n\n  // console.log(updatedAmountPaid);\n  // console.log(updatedDescription);\n  // console.log(userAmounts);\n  // SUCCESS REDUCER\n  // const groupCreate = useSelector((state) => state.groupCreate);\n  // const { success: groupCreateSuccess } = groupCreate;\n\n  // Function to handle changes in user amount inputs\n  const handleUserAmountChange = (userId, amount) => {\n    setUserAmounts(prevAmounts => ({\n      ...prevAmounts,\n      [userId]: amount\n    }));\n  };\n  // console.log(userAmounts);\n\n  // Function to submit the updated data\n  const handleSubmit = () => {\n    // Calculate the total amount from userAmounts\n    const totalAmount = Object.values(userAmounts).reduce((total, amount) => total + parseFloat(amount || 0), 0);\n\n    // Check if the total amount is not equal to the expense amount\n    if (parseFloat(totalAmount) !== parseFloat(updatedAmountPaid)) {\n      handleShowAlert(\"Expense distribution doesn't add up to expense amount\", \"danger\");\n    } else {\n      // Create an array of expense_details based on userAmounts\n      const expenseDetails = Object.keys(userAmounts).map(userId => ({\n        user: userId,\n        amount_owed: parseFloat(userAmounts[userId])\n      }));\n\n      // Create the data object to be logged\n      const updatedData = {\n        description: updatedDescription,\n        amount: parseFloat(updatedAmountPaid),\n        expense_details: expenseDetails\n      };\n      console.log(updatedData);\n      setSuccess(true);\n      onClose();\n    }\n  };\n  const handleShowAlert = useCallback((message, variant) => {\n    setAlertMessage(message);\n    setAlertVariant(variant);\n    setShowAlert(true);\n    setTimeout(() => {\n      setShowAlert(false);\n    }, 3000);\n  }, []);\n  useEffect(() => {\n    if (success) {\n      handleShowAlert(\"Successfully updated expense\", \"success\");\n    } else if (success === false) {\n      handleShowAlert(\"Error occurred while trying to update success\", \"danger\");\n    }\n  }, [success, handleShowAlert]);\n\n  // Initialize userAmounts when the expense prop changes\n  useEffect(() => {\n    if (expense) {\n      // Initialize userAmounts with the initial data\n      const initialUserAmounts = {};\n      expense.expense_details.forEach(detail => {\n        initialUserAmounts[detail.user.id] = detail.amount_owed;\n      });\n      setUserAmounts(initialUserAmounts);\n\n      // Initialize other state variables as needed\n      setUpdatedDescription(expense.description);\n      setUpdatedAmountPaid(expense.amount);\n\n      //DELETE THIS\n      setSuccess(false);\n    }\n  }, [expense]);\n  if (!expense) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: onClose,\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          className: \"expense-detail-popout py-3\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            className: \"left-col\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Expense Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex flex-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                className: \"d-flex align-items-center my-0 me-2\",\n                children: \"Payer:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"p-0 m-0\",\n                children: expense.payer.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex flex-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                className: \"my-0 me-2\",\n                children: \"Amount Paid:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                type: \"number\",\n                value: updatedAmountPaid,\n                onChange: e => {\n                  setUpdatedAmountPaid(e.target.value);\n                },\n                inputMode: \"numeric\",\n                pattern: \"[0-9]*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex flex-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                className: \"d-flex align-items-center my-0 me-2\",\n                children: \"Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"p-0 m-0\",\n                children: expense.date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex flex-column\",\n              children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                className: \"mb-2\",\n                children: \"Description:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                as: \"textarea\",\n                rows: 4,\n                value: updatedDescription,\n                onChange: e => {\n                  setUpdatedDescription(e.target.value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"right-col border-primary \",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Expense Distribution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 29\n            }, this), expense.expense_details.map(detail => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"detail d-flex flex-row align-items-center my-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: detail.user.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 41\n                }, this), \"'s\\xA0split\\xA0is\\xA0$\", /*#__PURE__*/_jsxDEV(FormControl, {\n                  type: \"number\",\n                  value: userAmounts[detail.user.id] || detail.amount_owed,\n                  onChange: e => handleUserAmountChange(detail.user.id, e.target.value),\n                  inputMode: \"numeric\",\n                  pattern: \"[0-9]*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 37\n              }, this)\n            }, detail.user.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handleSubmit,\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: onClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this), showAlert && /*#__PURE__*/_jsxDEV(AlertMessage, {\n        message: alertMessage,\n        variant: alertVariant\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), showAlert && /*#__PURE__*/_jsxDEV(AlertMessage, {\n      message: alertMessage,\n      variant: alertVariant\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 9\n  }, this);\n}\n_s(ExpenseDetailPopup, \"xtJth/WZpb/c9lpGdS28s6G/EDU=\", false, function () {\n  return [useDispatch];\n});\n_c = ExpenseDetailPopup;\nexport default ExpenseDetailPopup;\nvar _c;\n$RefreshReg$(_c, \"ExpenseDetailPopup\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Modal","Button","Row","Col","FormControl","Form","useDispatch","useSelector","AlertMessage","jsxDEV","_jsxDEV","ExpenseDetailPopup","show","onClose","expense","_s","dispatch","showAlert","setShowAlert","alertMessage","setAlertMessage","alertVariant","setAlertVariant","updatedDescription","setUpdatedDescription","updatedAmountPaid","setUpdatedAmountPaid","userAmounts","setUserAmounts","success","setSuccess","handleUserAmountChange","userId","amount","prevAmounts","handleSubmit","totalAmount","Object","values","reduce","total","parseFloat","handleShowAlert","expenseDetails","keys","map","user","amount_owed","updatedData","description","expense_details","console","log","message","variant","setTimeout","initialUserAmounts","forEach","detail","id","children","onHide","centered","Body","className","fileName","_jsxFileName","lineNumber","columnNumber","payer","name","type","value","onChange","e","target","inputMode","pattern","date","as","rows","Footer","onClick","_c","$RefreshReg$"],"sources":["/Users/jeussantiago/Documents/coding/django/CoinCompanions/frontend/src/components/IndividualGroupScreenComponents/ExpenseDetailPopup.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport { Modal, Button, Row, Col, FormControl, Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"../../styles/screens/GroupsScreens.css\";\nimport AlertMessage from \"../AlertMessage\";\n\nfunction ExpenseDetailPopup({ show, onClose, expense }) {\n    // const dispatch = useDispatch();\n    // const [showAlert, setShowAlert] = useState(false);\n    // const [alertMessage, setAlertMessage] = useState(\"\");\n    // const [alertVariant, setAlertVariant] = useState(\"\");\n    // const [success, setSuccess] = useState(false);\n    // const [form, setForm] = useState({\n    //     title: \"\",\n    // });\n\n    // const groupCreate = useSelector((state) => state.groupCreate);\n    // const { success: groupCreateSuccess } = groupCreate;\n\n    // const handleFormChange = (e) => {\n    //     setForm({\n    //         ...form,\n    //         [e.target.name]: e.target.value,\n    //     });\n    // };\n\n    // const handleSubmit = () => {\n    //     // dispatch(createGroup(form.title));\n    //     setSuccess(true);\n    //     closePopup();\n    // };\n\n    // const closePopup = () => {\n    //     // Clear the title input\n    //     setForm({\n    //         ...form,\n    //         title: \"\",\n    //     });\n    //     // Close the popup\n    //     onClose();\n    //     // dispatch({ type: GROUP_CREATE_RESET });\n    // };\n\n    // const handleShowAlert = useCallback((message, variant) => {\n    //     setAlertMessage(message);\n    //     setAlertVariant(variant);\n    //     setShowAlert(true);\n    //     setTimeout(() => {\n    //         setShowAlert(false);\n    //     }, 3000);\n    // }, []);\n\n    // useEffect(() => {\n    //     if (groupCreateSuccess || success) {\n    //         handleShowAlert(\"Created new group\", \"success\");\n    //     } else if (groupCreateSuccess === false || success === false) {\n    //         handleShowAlert(\n    //             \"Error occurred while trying to create a new group\",\n    //             \"danger\"\n    //         );\n    //     }\n    // }, [groupCreateSuccess, success, handleShowAlert]);\n\n    // useEffect(() => {\n    //     if (expense) {\n    //         setSuccess(false);\n    //     }\n    // }, [expense]);\n\n    // return (\n    //     <div>\n    //         <Modal show={show} onHide={onClose}>\n    //             <Modal.Header>\n    //                 <Modal.Title>Create New Group</Modal.Title>\n    //             </Modal.Header>\n    //             <Modal.Body>\n    //                 <Form>\n    //                     <Form.Group>\n    //                         <Form.Control\n    //                             type=\"text\"\n    //                             placeholder=\"Enter group title\"\n    //                             name=\"title\"\n    //                             onChange={handleFormChange}\n    //                         />\n    //                     </Form.Group>\n    //                 </Form>\n    //             </Modal.Body>\n    //             <Modal.Footer className=\"d-flex flex-row justify-content-between\">\n    //                 <Button variant=\"primary\" onClick={handleSubmit}>\n    //                     Submit\n    //                 </Button>\n    //                 <Button variant=\"secondary\" onClick={() => closePopup()}>\n    //                     Close\n    //                 </Button>\n    //             </Modal.Footer>\n    //         </Modal>\n    //         {showAlert && (\n    //             <AlertMessage message={alertMessage} variant={alertVariant} />\n    //         )}\n    //     </div>\n    // );\n\n    const dispatch = useDispatch();\n    const [showAlert, setShowAlert] = useState(false);\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [alertVariant, setAlertVariant] = useState(\"\");\n    const [updatedDescription, setUpdatedDescription] = useState(\"\");\n    const [updatedAmountPaid, setUpdatedAmountPaid] = useState(0);\n    const [userAmounts, setUserAmounts] = useState({});\n\n    const [success, setSuccess] = useState(false);\n\n    // console.log(updatedAmountPaid);\n    // console.log(updatedDescription);\n    // console.log(userAmounts);\n    // SUCCESS REDUCER\n    // const groupCreate = useSelector((state) => state.groupCreate);\n    // const { success: groupCreateSuccess } = groupCreate;\n\n    // Function to handle changes in user amount inputs\n    const handleUserAmountChange = (userId, amount) => {\n        setUserAmounts((prevAmounts) => ({\n            ...prevAmounts,\n            [userId]: amount,\n        }));\n    };\n    // console.log(userAmounts);\n\n    // Function to submit the updated data\n    const handleSubmit = () => {\n        // Calculate the total amount from userAmounts\n        const totalAmount = Object.values(userAmounts).reduce(\n            (total, amount) => total + parseFloat(amount || 0),\n            0\n        );\n\n        // Check if the total amount is not equal to the expense amount\n        if (parseFloat(totalAmount) !== parseFloat(updatedAmountPaid)) {\n            handleShowAlert(\n                \"Expense distribution doesn't add up to expense amount\",\n                \"danger\"\n            );\n        } else {\n            // Create an array of expense_details based on userAmounts\n            const expenseDetails = Object.keys(userAmounts).map((userId) => ({\n                user: userId,\n                amount_owed: parseFloat(userAmounts[userId]),\n            }));\n\n            // Create the data object to be logged\n            const updatedData = {\n                description: updatedDescription,\n                amount: parseFloat(updatedAmountPaid),\n                expense_details: expenseDetails,\n            };\n\n            console.log(updatedData);\n            setSuccess(true);\n            onClose();\n        }\n    };\n\n    const handleShowAlert = useCallback((message, variant) => {\n        setAlertMessage(message);\n        setAlertVariant(variant);\n        setShowAlert(true);\n        setTimeout(() => {\n            setShowAlert(false);\n        }, 3000);\n    }, []);\n\n    useEffect(() => {\n        if (success) {\n            handleShowAlert(\"Successfully updated expense\", \"success\");\n        } else if (success === false) {\n            handleShowAlert(\n                \"Error occurred while trying to update success\",\n                \"danger\"\n            );\n        }\n    }, [success, handleShowAlert]);\n\n    // Initialize userAmounts when the expense prop changes\n    useEffect(() => {\n        if (expense) {\n            // Initialize userAmounts with the initial data\n            const initialUserAmounts = {};\n            expense.expense_details.forEach((detail) => {\n                initialUserAmounts[detail.user.id] = detail.amount_owed;\n            });\n            setUserAmounts(initialUserAmounts);\n\n            // Initialize other state variables as needed\n            setUpdatedDescription(expense.description);\n            setUpdatedAmountPaid(expense.amount);\n\n            //DELETE THIS\n            setSuccess(false);\n        }\n    }, [expense]);\n\n    if (!expense) {\n        return null;\n    }\n\n    return (\n        <div>\n            <Modal show={show} onHide={onClose} centered>\n                <Modal.Body>\n                    <Row className=\"expense-detail-popout py-3\">\n                        <Col className=\"left-col\">\n                            <h5>Expense Details</h5>\n                            <div className=\"d-flex flex-row\">\n                                <h6 className=\"d-flex align-items-center my-0 me-2\">\n                                    Payer:\n                                </h6>\n\n                                <p className=\"p-0 m-0\">{expense.payer.name}</p>\n                            </div>\n                            <div className=\"d-flex flex-row\">\n                                <h6 className=\"my-0 me-2\">Amount Paid:</h6>\n                                <FormControl\n                                    type=\"number\"\n                                    value={updatedAmountPaid}\n                                    onChange={(e) => {\n                                        setUpdatedAmountPaid(e.target.value);\n                                    }}\n                                    inputMode=\"numeric\"\n                                    pattern=\"[0-9]*\"\n                                />\n                            </div>\n                            <div className=\"d-flex flex-row\">\n                                <h6 className=\"d-flex align-items-center my-0 me-2\">\n                                    Date:\n                                </h6>\n\n                                <p className=\"p-0 m-0\">{expense.date}</p>\n                            </div>\n                            <div className=\"d-flex flex-column\">\n                                <h6 className=\"mb-2\">Description:</h6>\n                                <FormControl\n                                    as=\"textarea\"\n                                    rows={4}\n                                    value={updatedDescription}\n                                    onChange={(e) => {\n                                        setUpdatedDescription(e.target.value);\n                                    }}\n                                />\n                            </div>\n                        </Col>\n                        <Col className=\"right-col border-primary \">\n                            <h5>Expense Distribution</h5>\n                            {expense.expense_details.map((detail) => (\n                                <div key={detail.user.id}>\n                                    <div className=\"detail d-flex flex-row align-items-center my-2\">\n                                        <strong>{detail.user.name}</strong>\n                                        's&nbsp;split&nbsp;is&nbsp;$\n                                        <FormControl\n                                            type=\"number\"\n                                            value={\n                                                userAmounts[detail.user.id] ||\n                                                detail.amount_owed\n                                            }\n                                            onChange={(e) =>\n                                                handleUserAmountChange(\n                                                    detail.user.id,\n                                                    e.target.value\n                                                )\n                                            }\n                                            inputMode=\"numeric\"\n                                            pattern=\"[0-9]*\"\n                                        />\n                                    </div>\n                                </div>\n                            ))}\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={handleSubmit}>\n                        Save Changes\n                    </Button>\n                    <Button variant=\"secondary\" onClick={onClose}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n                {showAlert && (\n                    <AlertMessage\n                        message={alertMessage}\n                        variant={alertVariant}\n                    />\n                )}\n            </Modal>\n            {showAlert && (\n                <AlertMessage message={alertMessage} variant={alertVariant} />\n            )}\n        </div>\n    );\n}\n\nexport default ExpenseDetailPopup;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}