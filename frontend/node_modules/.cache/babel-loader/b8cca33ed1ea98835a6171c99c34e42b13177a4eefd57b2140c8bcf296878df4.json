{"ast":null,"code":"var _jsxFileName = \"/Users/jeussantiago/Documents/coding/django/CoinCompanions/frontend/src/components/HomeScreenComponents/GoogleLoginButton.js\";\n// GoogleLoginButton.js\nimport React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n// import { googleLogin } from \"../../actions/userActions\";\nimport { Button } from \"react-bootstrap\";\n// dispatch(googleLogin(response.profileObj.tokenId))\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\nconsole.log(\"client_id: \", CLIENT_ID);\nfunction GoogleLoginButton() {\n  // Your Google API Client ID\n\n  // const userLogin = useSelector((state) => state.userLogin);\n  // const { userInfo } = userLogin;\n\n  window.onload = () => {\n    // Load and initialize gapi\n    window.gapi.load(\"auth2\", () => {\n      window.gapi.auth2.init({\n        client_id: CLIENT_ID\n      });\n    });\n  };\n  const handleGoogleLogin = () => {\n    console.log(\"hello\");\n    const auth2 = window.gapi.auth2.getAuthInstance();\n    auth2.signIn().then(googleUser => {\n      const idToken = googleUser.getAuthResponse().id_token;\n      console.log(\"user idToken: \", idToken);\n      // Send the `idToken` to your server for verification\n      // Your server should verify the token with Google and log in or create a user as needed\n      // You can use a library like `google-auth-library` on your server for this purpose\n    });\n  };\n\n  const onSignIn = googleUser => {\n    var profile = googleUser.getBasicProfile();\n    console.log(\"ID: \" + profile.getId()); // Do not send to your backend! Use an ID token instead.\n    console.log(\"Name: \" + profile.getName());\n    console.log(\"Image URL: \" + profile.getImageUrl());\n    console.log(\"Email: \" + profile.getEmail()); // This is null if the 'email' scope is not present.\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      variant: \"dark\",\n      onClick: handleGoogleLogin,\n      className: \"w-100 rounded-pill mt-2 fw-bold\",\n      children: \"Google\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_c = GoogleLoginButton;\nexport default GoogleLoginButton;\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginButton\");","map":{"version":3,"names":["React","useEffect","useSelector","Button","jsxDEV","_jsxDEV","CLIENT_ID","process","env","REACT_APP_CLIENT_ID","console","log","GoogleLoginButton","window","onload","gapi","load","auth2","init","client_id","handleGoogleLogin","getAuthInstance","signIn","then","googleUser","idToken","getAuthResponse","id_token","onSignIn","profile","getBasicProfile","getId","getName","getImageUrl","getEmail","children","type","variant","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jeussantiago/Documents/coding/django/CoinCompanions/frontend/src/components/HomeScreenComponents/GoogleLoginButton.js"],"sourcesContent":["// GoogleLoginButton.js\nimport React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n// import { googleLogin } from \"../../actions/userActions\";\nimport { Button } from \"react-bootstrap\";\n// dispatch(googleLogin(response.profileObj.tokenId))\n\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\nconsole.log(\"client_id: \", CLIENT_ID);\nfunction GoogleLoginButton() {\n    // Your Google API Client ID\n\n    // const userLogin = useSelector((state) => state.userLogin);\n    // const { userInfo } = userLogin;\n\n    window.onload = () => {\n        // Load and initialize gapi\n        window.gapi.load(\"auth2\", () => {\n            window.gapi.auth2.init({\n                client_id: CLIENT_ID,\n            });\n        });\n    };\n\n    const handleGoogleLogin = () => {\n        console.log(\"hello\");\n        const auth2 = window.gapi.auth2.getAuthInstance();\n\n        auth2.signIn().then((googleUser) => {\n            const idToken = googleUser.getAuthResponse().id_token;\n            console.log(\"user idToken: \", idToken);\n            // Send the `idToken` to your server for verification\n            // Your server should verify the token with Google and log in or create a user as needed\n            // You can use a library like `google-auth-library` on your server for this purpose\n        });\n    };\n\n    const onSignIn = (googleUser) => {\n        var profile = googleUser.getBasicProfile();\n        console.log(\"ID: \" + profile.getId()); // Do not send to your backend! Use an ID token instead.\n        console.log(\"Name: \" + profile.getName());\n        console.log(\"Image URL: \" + profile.getImageUrl());\n        console.log(\"Email: \" + profile.getEmail()); // This is null if the 'email' scope is not present.\n    };\n\n    return (\n        <div>\n            <Button\n                type=\"submit\"\n                variant=\"dark\"\n                onClick={handleGoogleLogin}\n                className=\"w-100 rounded-pill mt-2 fw-bold\"\n            >\n                Google\n            </Button>\n            {/* <div className=\"g-signin2\" data-onsuccess={onSignIn}>\n                google sign in from site\n            </div> */}\n        </div>\n    );\n}\n\nexport default GoogleLoginButton;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,aAAa;AACzC;AACA,SAASC,MAAM,QAAQ,iBAAiB;AACxC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,mBAAmB;AACjDC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEL,SAAS,CAAC;AACrC,SAASM,iBAAiBA,CAAA,EAAG;EACzB;;EAEA;EACA;;EAEAC,MAAM,CAACC,MAAM,GAAG,MAAM;IAClB;IACAD,MAAM,CAACE,IAAI,CAACC,IAAI,CAAC,OAAO,EAAE,MAAM;MAC5BH,MAAM,CAACE,IAAI,CAACE,KAAK,CAACC,IAAI,CAAC;QACnBC,SAAS,EAAEb;MACf,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EAED,MAAMc,iBAAiB,GAAGA,CAAA,KAAM;IAC5BV,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB,MAAMM,KAAK,GAAGJ,MAAM,CAACE,IAAI,CAACE,KAAK,CAACI,eAAe,CAAC,CAAC;IAEjDJ,KAAK,CAACK,MAAM,CAAC,CAAC,CAACC,IAAI,CAAEC,UAAU,IAAK;MAChC,MAAMC,OAAO,GAAGD,UAAU,CAACE,eAAe,CAAC,CAAC,CAACC,QAAQ;MACrDjB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEc,OAAO,CAAC;MACtC;MACA;MACA;IACJ,CAAC,CAAC;EACN,CAAC;;EAED,MAAMG,QAAQ,GAAIJ,UAAU,IAAK;IAC7B,IAAIK,OAAO,GAAGL,UAAU,CAACM,eAAe,CAAC,CAAC;IAC1CpB,OAAO,CAACC,GAAG,CAAC,MAAM,GAAGkB,OAAO,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACvCrB,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAGkB,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC;IACzCtB,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGkB,OAAO,CAACI,WAAW,CAAC,CAAC,CAAC;IAClDvB,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGkB,OAAO,CAACK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACjD,CAAC;;EAED,oBACI7B,OAAA;IAAA8B,QAAA,eACI9B,OAAA,CAACF,MAAM;MACHiC,IAAI,EAAC,QAAQ;MACbC,OAAO,EAAC,MAAM;MACdC,OAAO,EAAElB,iBAAkB;MAC3BmB,SAAS,EAAC,iCAAiC;MAAAJ,QAAA,EAC9C;IAED;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIR,CAAC;AAEd;AAACC,EAAA,GAnDQhC,iBAAiB;AAqD1B,eAAeA,iBAAiB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}