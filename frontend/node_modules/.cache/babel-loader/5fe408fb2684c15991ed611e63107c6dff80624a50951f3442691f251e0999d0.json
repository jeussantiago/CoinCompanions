{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_FRIENDS_REQUEST, USER_FRIENDS_SUCCESS, USER_FRIENDS_FAIL } from \"../constants/userConstants\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    // get auth token when login\n    // because of our rondabout way of setting the email to be our username\n    // we pass in the the email as the username login credential\n    const {\n      data\n    } = await axios.post(\"/api/users/login\", {\n      username: email,\n      password: password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (err) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    // get auth token when login\n    // because of our rondabout way of setting the email to be our username\n    // we pass in the the email as the username login credential\n    const {\n      data\n    } = await axios.post(\"/api/users/register\", {\n      name: name,\n      email: email,\n      password: password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (err) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n    });\n  }\n};\nexport const listUsersFriends = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_FRIENDS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/friends/`, config);\n    dispatch({\n      type: USER_FRIENDS_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: USER_FRIENDS_FAIL,\n      payload: err.response && err.response.data.detail ? err.response.data.detail : err.message\n    });\n  }\n};","map":{"version":3,"names":["axios","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_FRIENDS_REQUEST","USER_FRIENDS_SUCCESS","USER_FRIENDS_FAIL","login","email","password","dispatch","type","config","headers","data","post","username","payload","localStorage","setItem","JSON","stringify","err","response","detail","message","logout","removeItem","register","name","listUsersFriends","getState","userLogin","userInfo","Authorization","token","get"],"sources":["/Users/jeussantiago/Documents/coding/django/CoinCompanions/frontend/src/actions/userActions.js"],"sourcesContent":["import axios from \"axios\";\nimport {\n    USER_LOGIN_FAIL,\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGOUT,\n    USER_REGISTER_FAIL,\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_FRIENDS_REQUEST,\n    USER_FRIENDS_SUCCESS,\n    USER_FRIENDS_FAIL\n} from \"../constants/userConstants\";\n\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        dispatch({ type: USER_LOGIN_REQUEST });\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        };\n\n        // get auth token when login\n        // because of our rondabout way of setting the email to be our username\n        // we pass in the the email as the username login credential\n        const { data } = await axios.post(\n            \"/api/users/login\",\n            {\n                username: email,\n                password: password,\n            },\n            config\n        );\n        dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\n\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\n    } catch (err) {\n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload:\n                err.response && err.response.data.detail\n                    ? err.response.data.detail\n                    : err.message,\n        });\n    }\n};\n\nexport const logout = () => (dispatch) => {\n    localStorage.removeItem(\"userInfo\");\n    dispatch({ type: USER_LOGOUT });\n};\n\nexport const register = (name, email, password) => async (dispatch) => {\n    try {\n        dispatch({ type: USER_REGISTER_REQUEST });\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        };\n\n        // get auth token when login\n        // because of our rondabout way of setting the email to be our username\n        // we pass in the the email as the username login credential\n        const { data } = await axios.post(\n            \"/api/users/register\",\n            {\n                name: name,\n                email: email,\n                password: password,\n            },\n            config\n        );\n\n        dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\n        dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\n\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\n    } catch (err) {\n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload:\n                err.response && err.response.data.detail\n                    ? err.response.data.detail\n                    : err.message,\n        });\n    }\n};\n\nexport const listUsersFriends = () => async (dispatch, getState) => {\n    try {\n        dispatch({ type: USER_FRIENDS_REQUEST });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        const { data } = await axios.get(`/api/users/friends/`, config);\n\n        dispatch({ type: USER_FRIENDS_SUCCESS, payload: data });\n    } catch (err) {\n        dispatch({\n            type: USER_FRIENDS_FAIL,\n            payload:\n                err.response && err.response.data.detail\n                    ? err.response.data.detail\n                    : err.message,\n        });\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}