{"ast":null,"code":"var _jsxFileName = \"/Users/jeussantiago/Documents/coding/django/CoinCompanions/frontend/src/screens/IndividualGroupScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Row } from \"react-bootstrap\";\nimport \"../styles/screens/GroupsScreens.css\";\nimport { GROUP_DETAILS_RESET } from \"../constants/groupConstants\";\nimport Message from \"../components/Message\";\nimport AlertMessage from \"../components/AlertMessage\";\nimport { getGroupDetails } from \"../actions/groupActions\";\nimport UpdateNamePopup from \"../components/IndividualGroupScreenComponents/UpdateNamePopup\";\n/**\n * if the user is not logged in. navigate to home page\n * if the user is not part of the group. navigate to the groups page\n *\n * modify group name\n *\n *\n * expense chart\n * list expenses\n *      type='expense' or 'settle'\n *      date_added\n *      description\n *      how_much\n *      who paid\n *      (edit button)\n *\n * add expense\n *      (will use the same form as edit expense. will have conditional to differentiate between adding expense and updating)\n *\n * (when you click an expense, it expands to show the specifics)\n *      how much each person owes the payer\n *\n * Expense Edit\n *      able to see how much each person paid\n *      decide to split it by:\n *          - raw numbers\n *          - percentage\n *          - evenly split\n *\n * RIGHT SIDE:\n * list all the users and their debt to each person or how much they are owed from certain people\n *\n * search bar to invite other users to group\n *\n *\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction IndividualGroupScreen() {\n  _s();\n  const dispatch = useDispatch();\n  // group id\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n\n  // get the current user details\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n\n  // get the members of the group\n  const groupDetails = useSelector(state => state.groupDetails);\n  const {\n    error: groupDetailsError,\n    loading: groupDetailsLoading,\n    groupDetail\n  } = groupDetails;\n  const [showUpdateNamePopup, setShowUpdateNamePopup] = useState(false);\n  const [isGroupNameUpdated, setIsGroupNameUpdated] = useState(false);\n  const openShowUpdateNamePopup = () => {\n    setShowUpdateNamePopup(true);\n  };\n  const closeShowUpdateNamePopup = () => {\n    setShowUpdateNamePopup(false);\n  };\n  const groupNameIsUpdated = () => {\n    setIsGroupNameUpdated(!isGroupNameUpdated);\n  };\n\n  // NAVIGATE THE USER AWAY IF THEY ARE NOT PART OF THIS GROUP\n  useEffect(() => {\n    // finished getting data and group id doesn't exist\n    //user not a member\n    if (!groupDetailsLoading && (groupDetailsError || groupDetail && !groupDetail.members.some(member => member.id === userInfo.id))) {\n      navigate(\"/groups\");\n      dispatch({\n        type: GROUP_DETAILS_RESET\n      });\n    }\n  }, [navigate, userInfo, groupDetailsError, groupDetailsLoading, groupDetail, dispatch]);\n  useEffect(() => {\n    dispatch(getGroupDetails(id));\n  }, [dispatch, id, isGroupNameUpdated]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"route-container screen-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: groupDetail ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex flex-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border border-primary pr-2\",\n            onClick: openShowUpdateNamePopup,\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"\",\n              children: groupDetail.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border border-primary\",\n            onClick: openShowUpdateNamePopup,\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              class: \"fa-solid fa-pen-to-square\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(UpdateNamePopup, {\n          show: showUpdateNamePopup,\n          onClose: closeShowUpdateNamePopup,\n          groupNameIsUpdated: groupNameIsUpdated,\n          currentGroupName: groupDetail.name,\n          groupId: id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n}\n_s(IndividualGroupScreen, \"pwcHrgMop5dPWObFmY4cmY6+RBQ=\", false, function () {\n  return [useDispatch, useParams, useNavigate, useSelector, useSelector];\n});\n_c = IndividualGroupScreen;\nexport default IndividualGroupScreen;\nvar _c;\n$RefreshReg$(_c, \"IndividualGroupScreen\");","map":{"version":3,"names":["React","useEffect","useState","Link","useNavigate","useParams","useDispatch","useSelector","Row","GROUP_DETAILS_RESET","Message","AlertMessage","getGroupDetails","UpdateNamePopup","jsxDEV","_jsxDEV","IndividualGroupScreen","_s","dispatch","id","navigate","userLogin","state","userInfo","groupDetails","error","groupDetailsError","loading","groupDetailsLoading","groupDetail","showUpdateNamePopup","setShowUpdateNamePopup","isGroupNameUpdated","setIsGroupNameUpdated","openShowUpdateNamePopup","closeShowUpdateNamePopup","groupNameIsUpdated","members","some","member","type","className","children","onClick","name","fileName","_jsxFileName","lineNumber","columnNumber","class","show","onClose","currentGroupName","groupId","_c","$RefreshReg$"],"sources":["/Users/jeussantiago/Documents/coding/django/CoinCompanions/frontend/src/screens/IndividualGroupScreen.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Row } from \"react-bootstrap\";\n\nimport \"../styles/screens/GroupsScreens.css\";\nimport { GROUP_DETAILS_RESET } from \"../constants/groupConstants\";\nimport Message from \"../components/Message\";\nimport AlertMessage from \"../components/AlertMessage\";\nimport { getGroupDetails } from \"../actions/groupActions\";\nimport UpdateNamePopup from \"../components/IndividualGroupScreenComponents/UpdateNamePopup\";\n/**\n * if the user is not logged in. navigate to home page\n * if the user is not part of the group. navigate to the groups page\n *\n * modify group name\n *\n *\n * expense chart\n * list expenses\n *      type='expense' or 'settle'\n *      date_added\n *      description\n *      how_much\n *      who paid\n *      (edit button)\n *\n * add expense\n *      (will use the same form as edit expense. will have conditional to differentiate between adding expense and updating)\n *\n * (when you click an expense, it expands to show the specifics)\n *      how much each person owes the payer\n *\n * Expense Edit\n *      able to see how much each person paid\n *      decide to split it by:\n *          - raw numbers\n *          - percentage\n *          - evenly split\n *\n * RIGHT SIDE:\n * list all the users and their debt to each person or how much they are owed from certain people\n *\n * search bar to invite other users to group\n *\n *\n */\nfunction IndividualGroupScreen() {\n    const dispatch = useDispatch();\n    // group id\n    const { id } = useParams();\n    const navigate = useNavigate();\n\n    // get the current user details\n    const userLogin = useSelector((state) => state.userLogin);\n    const { userInfo } = userLogin;\n\n    // get the members of the group\n    const groupDetails = useSelector((state) => state.groupDetails);\n    const {\n        error: groupDetailsError,\n        loading: groupDetailsLoading,\n        groupDetail,\n    } = groupDetails;\n\n    const [showUpdateNamePopup, setShowUpdateNamePopup] = useState(false);\n    const [isGroupNameUpdated, setIsGroupNameUpdated] = useState(false);\n\n    const openShowUpdateNamePopup = () => {\n        setShowUpdateNamePopup(true);\n    };\n\n    const closeShowUpdateNamePopup = () => {\n        setShowUpdateNamePopup(false);\n    };\n\n    const groupNameIsUpdated = () => {\n        setIsGroupNameUpdated(!isGroupNameUpdated);\n    };\n\n    // NAVIGATE THE USER AWAY IF THEY ARE NOT PART OF THIS GROUP\n    useEffect(() => {\n        // finished getting data and group id doesn't exist\n        //user not a member\n        if (\n            !groupDetailsLoading &&\n            (groupDetailsError ||\n                (groupDetail &&\n                    !groupDetail.members.some(\n                        (member) => member.id === userInfo.id\n                    )))\n        ) {\n            navigate(\"/groups\");\n            dispatch({ type: GROUP_DETAILS_RESET });\n        }\n    }, [\n        navigate,\n        userInfo,\n        groupDetailsError,\n        groupDetailsLoading,\n        groupDetail,\n        dispatch,\n    ]);\n\n    useEffect(() => {\n        dispatch(getGroupDetails(id));\n    }, [dispatch, id, isGroupNameUpdated]);\n\n    return (\n        <div className=\"route-container screen-container\">\n            <div>\n                {groupDetail ? (\n                    <div>\n                        <div className=\"d-flex flex-row\">\n                            <div\n                                className=\"border border-primary pr-2\"\n                                onClick={openShowUpdateNamePopup}\n                            >\n                                <h1 className=\"\">{groupDetail.name}</h1>\n                            </div>\n                            <div\n                                className=\"border border-primary\"\n                                onClick={openShowUpdateNamePopup}\n                            >\n                                <i class=\"fa-solid fa-pen-to-square\"></i>\n                            </div>\n                        </div>\n                        <UpdateNamePopup\n                            show={showUpdateNamePopup}\n                            onClose={closeShowUpdateNamePopup}\n                            groupNameIsUpdated={groupNameIsUpdated}\n                            currentGroupName={groupDetail.name}\n                            groupId={id}\n                        />\n                    </div>\n                ) : (\n                    <div>loading...</div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default IndividualGroupScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}